// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

interface AppCore {
    [Throws=CoreError]
    constructor(CoreArgs args, CoreUICallbackI ui_callback);

    [Throws=CoreError]
    void on_background();

    [Throws=CoreBackupError]
    void enable_backup();

    [Throws=CoreError]
    void disable_backup();

    [Throws=CoreError]
    string display_backup_password();

    [Throws=CoreError]
    boolean is_backup_enabled();

    [Throws=CoreError]
    i64? last_backup();

    [Throws=CoreError]
    sequence<CoreProfile> list_profiles();

    [Throws=CoreError]
    void create_profile(string name, string bundled_picture_name);

    [Throws=CoreError]
    string? random_bundled_profile_picture();

    [Throws=CoreError]
    sequence<u8> fetch_bundled_profile_picture(string picture_name);

    [Throws=CoreError]
    string active_profile_id();

    [Throws=CoreError]
    void set_active_profile_id(string profile_id);

    [Throws=CoreError]
    CoreToken native_token_for_address(string address_id);

    [Throws=CoreError]
    sequence<CoreToken> fungible_tokens_for_address(string address_id);

    [Throws=CoreError]
    string get_in_page_script(string rpc_provider_name, string request_handler_name);

    [Throws=CoreError]
    void in_page_request(InPageRequestContextI context, string raw_request);

    [Throws=CoreError]
    void user_approved_dapp(InPageRequestContextI context, DappApprovalParams params);

    [Throws=CoreError]
    void user_rejected_dapp(InPageRequestContextI context, DappApprovalParams params);

    [Throws=CoreError]
    void eth_transfer_native_token(EthTransferNativeTokenArgs args);

    [Throws=CoreError]
    void eth_transfer_fungible_token(EthTransferFungibleTokenArgs args);

    sequence<CoreEthChain> list_eth_chains();

    [Throws=CoreError]
    void add_eth_chain(u64 chain_id, string address_id);

    [Throws=CoreError]
    void eth_change_dapp_chain(EthChangeDappChainArgs args);

    [Throws=CoreError]
    sequence<string> top_dapps(u32 limit);
};

[Error]
enum CoreError{
    "Fatal",
    "Retriable",
    "User",
};

[Error]
enum CoreBackupError{
    "BackupDirectoryNotAvailable",
    "Error"
};

dictionary CoreProfile {
    string id;
    string name;
    sequence<u8> picture;
    sequence<CoreAddress> wallets;
    sequence<CoreDapp> dapps;
    string created_at;
    string? updated_at;
};

dictionary CoreDapp {
    string id;
    string profile_id;
    string human_identifier;
    string url;
    sequence<CoreAddress> addresses;
    string? selected_address_id;
    sequence<u8>? favicon;
    string? last_used;
};

dictionary CoreAddress {
    string id;
    boolean is_wallet;
    string checksum_address;
    string blockchain_explorer_link;
    string chain_display_name;
    boolean is_test_net;
    sequence<u8> chain_icon;
    CoreToken native_token;
};

enum TokenType {
    "Native",
    "Fungible"
};

dictionary CoreToken {
    string id;
    string symbol;
    string? amount;
    TokenType token_type;
    sequence<u8>? icon;
};

dictionary CoreArgs {
    string device_id;
    string device_name;
    string cache_dir;
    string db_file_path;
    string? backup_dir;
};

dictionary CoreEthChain {
    u64 chain_id;
    string display_name;
};

dictionary DappApprovalParams {
    string profile_id;
    string dapp_identifier;
    sequence<u8>? favicon;
    string amount;
    boolean transfer_allotment;
    string token_symbol;
    string chain_display_name;
    u64 chain_id;
    string json_rpc_request;
};

dictionary EthTransferNativeTokenArgs {
    string from_address_id;
    string to_checksum_address;
    string amount_decimal;
};

dictionary EthTransferFungibleTokenArgs {
    string from_address_id;
    string to_checksum_address;
    string amount_decimal;
    string token_id;
};

dictionary EthChangeDappChainArgs {
    string profile_id;
    string dapp_id;
    u64 new_chain_id;
};

dictionary TokenTransferResult {
    string amount;
    string token_symbol;
    string chain_display_name;
    string to_display_name;
    string? explorer_url;
    string? error_message;
};

dictionary DappAllotmentTransferResult {
    string dapp_identifier;
    string amount;
    string token_symbol;
    string chain_display_name;
    string? error_message;
};

dictionary DappSignatureResult {
    string dapp_identifier;
};

dictionary DappTransactionApproved {
    string dapp_identifier;
    string chain_display_name;
};

dictionary DappTransactionResult {
    string dapp_identifier;
    string chain_display_name;
    string? explorer_url;
    string? error_message;
};

callback interface CoreUICallbackI {
    void sent_token_transfer(TokenTransferResult result);
    void token_transfer_result(TokenTransferResult result);
    void dapp_allotment_transfer_result(DappAllotmentTransferResult result);
    void signed_message_for_dapp(DappSignatureResult result);
    void approved_dapp_transaction(DappTransactionApproved result);
    void dapp_transaction_result(DappTransactionResult result);
};

callback interface CoreInPageCallbackI {
    void request_dapp_approval(DappApprovalParams dapp_approval);
    void respond(string response_hex);
    void notify(string message_hex);
};

callback interface InPageRequestContextI {
    string page_url();
    CoreInPageCallbackI callbacks();
};

namespace SealVaultCore {
    string? core_uri_fixup(string input);

    [Throws=CoreError]
    BackupRestoreData? core_find_latest_backup(string backup_dir);

    [Throws=CoreError]
    void core_restore_backup(CoreArgs core_args, string from_path, string password);
};

dictionary BackupRestoreData {
    i64 timestamp;
    string device_name;
    string file_path;
};

